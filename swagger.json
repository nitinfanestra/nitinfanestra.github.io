{
  "openapi": "3.0.0",
  "info": {
    "title": "Patient Wallet ClusterIP APIs",
    "version": "1.0.0",
    "description": "API for PatientWallet ClusterIP Services"
  },
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all users",
        "description": "Retrieve a list of users based on parameters combination",
        "parameters": [
          {
            "name": "userType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "client",
                "provider"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "pending"
              ]
            }
          },
          {
            "name": "emailVerificationStatus",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "verified",
                "pendingVerification"
              ]
            }
          },
          {
            "name": "dateRangeStartUtc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "default": "1970-01-01T00:00:00Z"
            },
            "description": "When provided then dateRangeEndUtc is also needed else currentUtc dateTime is taken by default"
          },
          {
            "name": "dateRangeEndUtc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "default": "current UTC DateTime"
            },
            "description": "When provided then dateRangeStartUtc is also needed else 1st Jan 1970 UTC dateTime is taken by default"
          },
          {
            "name": "dateRangeFilterMetric",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt"
              ],
              "default": "createdAt"
            },
            "description": "This is required when dateRangeStartUtc or dateRangeEndUtc is provided default is createdAt"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates a New User",
        "description": "Creates a New User",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creates a User using provided Body Params in Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a single User by Auth0 provided UserID",
        "description": "Get a single User by Auth0 provided UserID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Endpoint to Update a User using PUT Verb",
        "description": "Endpoint to Update a User using PUT Verb",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated User Values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Endpoint to Update a User using PATCH Verb",
        "description": "Endpoint to Update a User using PATCH Verb",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated User Values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Endpoint to Delete a User by Auth0 provided UserID",
        "description": "Endpoint to Delete a User by Auth0 provided UserID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User Deleted!!"
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Retrieve all notifications",
        "operationId": "getAllNotifications",
        "responses": {
          "200": {
            "description": "A list of all notifications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/date-range": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Retrieve all notifications within a date range",
        "operationId": "getNotificationsByDateRange",
        "parameters": [
          {
            "name": "startDateUtc",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDateUtc",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notifications within the specified date range",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/user/{userId}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Retrieve all notifications for a user",
        "operationId": "getNotificationsByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateUtc",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDateUtc",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notifications for the specified user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/channel/{channel}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Retrieve all notifications for a specific channel",
        "operationId": "getNotificationsByChannel",
        "parameters": [
          {
            "name": "channel",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDateUtc",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDateUtc",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notifications for the specified channel",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{notificationId}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Retrieve a notification by ID",
        "operationId": "getNotificationById",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single notification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationMessage"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Notifications"
        ],
        "summary": "Update a notification by ID",
        "operationId": "updateNotificationById",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "Notifications"
        ],
        "summary": "Delete a notification by ID",
        "operationId": "deleteNotificationById",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification deleted successfully"
          }
        }
      }
    },
    "/notifications/delete": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Delete notifications by criteria",
        "operationId": "deleteNotificationsByCriteria",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "startDateUtc": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endDateUtc": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notifications deleted successfully"
          }
        }
      }
    },
    "/notifications/{appointmentId}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Retrieve notifications for an appointment",
        "operationId": "getNotificationsByAppointmentId",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All notifications for this appointment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{calendarEventId}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Retrieve notifications for a calendarEvent",
        "operationId": "getNotificationsByCalendarEventId",
        "parameters": [
          {
            "name": "calendarEventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All notifications for this calendarEvent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationMessage"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/logs": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Get Logs on Filters",
        "description": "Get all logs based on filters passed in Query Params",
        "parameters": [
          {
            "name": "startDateUtc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "default": "1970-01-01T00:00:00Z"
            }
          },
          {
            "name": "endDateUtc",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "default": "currentUtcDateTime"
            }
          },
          {
            "name": "serviceName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "user",
                "fhir",
                "notifications",
                "calendarschedular",
                "conferencing",
                "frontend",
                "All"
              ],
              "default": "All"
            }
          },
          {
            "name": "entityName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "User",
                "FHIR",
                "FHIRUserSync",
                "Notification",
                "Conferencing",
                "Calendar",
                "CalendarEvent",
                "Availability",
                "WorkingHours",
                "Appointments",
                "Attendee",
                "Holidays",
                "Notifications",
                "UserNotificationSettings",
                "All"
              ],
              "default": "All"
            }
          },
          {
            "name": "hasErrors",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Yes",
                "No",
                "All"
              ],
              "default": "All"
            }
          },
          {
            "name": "sessionId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs for the matching filters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Log"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "Create a new Log record",
        "description": "Using POST Verb to create a new Log record",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLog"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a Log record is sucessfully Inserted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Log"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "userType": {
            "type": "string",
            "enum": [
              "client",
              "provider"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "userStatus": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "pending"
            ]
          },
          "profileImageUrl": {
            "type": "string"
          },
          "emailVerificationStatus": {
            "type": "string",
            "enum": [
              "verified",
              "pending"
            ]
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "pending"
            ]
          },
          "emailVerificationStatusCode": {
            "type": "string",
            "enum": [
              "verified",
              "pendingVerification"
            ]
          },
          "profileImageUrl": {
            "type": "string"
          }
        }
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "userSharedkey": {
            "type": "string"
          },
          "sessionState": {
            "type": "string"
          },
          "userType": {
            "type": "string",
            "enum": [
              "client",
              "provider"
            ]
          },
          "userStatus": {
            "type": "string",
            "enum": [
              "active",
              "inactive",
              "pending"
            ]
          },
          "profileImageUrl": {
            "type": "string"
          },
          "emailVerificationStatus": {
            "type": "string",
            "enum": [
              "verified",
              "pendingVerification"
            ]
          }
        }
      },
      "Log": {
        "type": "object",
        "properties": {
          "logId": {
            "type": "string"
          },
          "sessionId": {
            "type": "string"
          },
          "serviceName": {
            "type": "string",
            "enum": [
              "user",
              "fhir",
              "notifications",
              "calendarschedular",
              "conferencing",
              "frontend",
              "All"
            ],
            "default": "All"
          },
          "entityName": {
            "type": "string",
            "enum": [
              "User",
              "FHIR",
              "FHIRUserSync",
              "Notification",
              "Conferencing",
              "Calendar",
              "CalendarEvent",
              "Availability",
              "WorkingHours",
              "Appointments",
              "Attendee",
              "Holidays",
              "Notifications",
              "UserNotificationSettings",
              "All"
            ],
            "default": "All"
          },
          "logLevel": {
            "type": "string",
            "enum": [
              "information",
              "warning",
              "error"
            ]
          },
          "loggedAt": {
            "type": "string",
            "format": "date-time"
          },
          "hasErrors": {
            "type": "boolean"
          },
          "logMessage": {
            "type": "string",
            "description": "Message logged from the backend"
          },
          "errorMessage": {
            "type": "string",
            "description": "If a Log has an error then the actual error message body!!"
          }
        }
      },
      "CreateLog": {
        "type": "object",
        "properties": {
          "ServiceName": {
            "type": "string",
            "enum": [
              "User",
              "FHIR",
              "Notification",
              "Conferencing",
              "CalendarSchedule",
              "FrontEnd",
              "All"
            ],
            "default": "All"
          },
          "EntityName": {
            "type": "string",
            "enum": [
              "User",
              "FHIR",
              "FHIRUserSync",
              "Notification",
              "Conferencing",
              "Calendar",
              "CalendarEvent",
              "Availability",
              "WorkingHours",
              "Appointments",
              "Attendee",
              "Holidays",
              "Notifications",
              "UserNotificationSettings",
              "All"
            ],
            "default": "All"
          },
          "LogLevel": {
            "type": "string",
            "enum": [
              "Information",
              "Warning",
              "Error",
              "All"
            ],
            "default": "All"
          },
          "SessionID": {
            "type": "string"
          },
          "LoggedAt": {
            "type": "string",
            "format": "date-time"
          },
          "LogMessage": {
            "type": "string",
            "description": "A description of the message being logged in backend"
          },
          "ErrorMessage": {
            "type": "string",
            "description": "If an error is logged. Then the actual error Message. this will be NULL if there is no Error."
          }
        }
      },
      "NotificationMessage": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string"
          },
          "eventTypeID": {
            "type": "integer"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "recipientUser": {
            "type": "string"
          },
          "payload": {
            "type": "object",
            "properties": {
              "calendarEventID": {
                "type": "integer"
              },
              "recipientUserType": {
                "type": "string"
              },
              "triggerTimeUtc": {
                "type": "string",
                "format": "date-time"
              },
              "notificationLink": {
                "type": "string",
                "format": "uri"
              },
              "notificationContent": {
                "type": "string"
              }
            }
          }
        }
      }
      
    }
  }
}